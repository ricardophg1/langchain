import streamlit as st
import os
from dotenv import load_dotenv
from langchain.prompts import PromptTemplate
from pages.financeiro import dados_financeiros
from src.models.openai_model import get_response
import pandas as pd

# Configura√ß√µes e op√ß√µes
EMPRESAS = ['ACME Corp', 'Globex Corporation', 'Soylent Corp', 'Initech', 'Umbrella Corporation']
TRIMESTRES = ['Q1', 'Q2', 'Q3', 'Q4']
ANOS = [2024, 2023, 2022, 2021]
IDIOMAS = ['Portugu√™s', 'Ingl√™s', 'Espanhol', 'Franc√™s', 'Alem√£o']
ANALISES = [
    "An√°lise de Dados Financeiros",
    "An√°lise do Balan√ßo Patrimonial",
    "An√°lise do Fluxo de Caixa",
    "An√°lise de Tend√™ncias",
    "An√°lise de Receita e Lucro",
    "An√°lise de Posi√ß√£o de Mercado"
]

def initialize_session_state():
    """Inicializa vari√°veis de estado da sess√£o"""
    if 'history' not in st.session_state:
        st.session_state.history = []
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    if 'selected_params' not in st.session_state:
        st.session_state.selected_params = {
            'empresa': EMPRESAS[0],
            'trimestre': TRIMESTRES[0],
            'ano': ANOS[0],
            'idioma': IDIOMAS[0],
            'analise': ANALISES[0]
        }

def load_environment():
    """Carrega e valida as vari√°veis de ambiente"""
    load_dotenv()
    api_key = os.getenv('OPENAI_API_KEY')
    if not api_key:
        st.error("‚ö†Ô∏è OPENAI_API_KEY n√£o encontrada no arquivo .env")
        st.info("Por favor, configure sua chave API no arquivo .env")
        st.stop()
    return api_key

def create_chat():
    """Cria a se√ß√£o de chat"""
    st.sidebar.markdown("---")
    st.sidebar.subheader("üí¨ Chat Assistente")
    
    # Exibir hist√≥rico do chat
    for msg in st.session_state.chat_history:
        with st.sidebar.chat_message(msg["role"]):
            st.write(msg["content"])
    
    # Input do chat
    message = st.sidebar.text_input("Digite sua pergunta:")
    if message:
        # Adicionar mensagem do usu√°rio
        st.session_state.chat_history.append({"role": "user", "content": message})
        
        # Contexto do √∫ltimo relat√≥rio
        context = ""
        if st.session_state.history:
            last_report = st.session_state.history[-1]
            context = f"""
            √öltimo relat√≥rio gerado:
            Empresa: {last_report['empresa']}
            Per√≠odo: {last_report['periodo']}
            An√°lise: {last_report['analise']}
            """
        
        # Gerar resposta
        prompt = f"""
        Voc√™ √© um assistente especializado em an√°lise empresarial.
        
        Contexto: {context}
        
        Pergunta: {message}
        
        Forne√ßa uma resposta clara e objetiva.
        """
        
        with st.sidebar.spinner("Gerando resposta..."):
            response = get_response(prompt)
            st.session_state.chat_history.append({"role": "assistant", "content": response})
            st.rerun()

def create_sidebar():
    """Cria e gerencia a barra lateral com hist√≥rico"""
    with st.sidebar:
        st.subheader("üìú Hist√≥rico de Relat√≥rios")
        
        # Bot√£o para limpar hist√≥rico
        if st.button("üóëÔ∏è Limpar Hist√≥rico"):
            st.session_state.history = []
            st.session_state.chat_history = []
            st.rerun()
        
        # Exibir hist√≥rico
        if st.session_state.history:
            for idx, report in enumerate(reversed(st.session_state.history)):
                with st.expander(f"Relat√≥rio {len(st.session_state.history) - idx}"):
                    st.write(f"**Empresa:** {report['empresa']}")
                    st.write(f"**Per√≠odo:** {report['periodo']}")
                    st.write(f"**An√°lise:** {report['analise']}")
                    if st.button("Recarregar", key=f"reload_{idx}"):
                        st.session_state.selected_params = report
                        st.rerun()

def generate_report(params):
    """Gera o relat√≥rio com os par√¢metros fornecidos"""
    try:
        # Template para o prompt
        template = '''
        Voc√™ √© um analista financeiro experiente.
        Escreva um relat√≥rio financeiro detalhado para a empresa "{empresa}" para o per√≠odo {periodo}.
        O relat√≥rio deve ser escrito em {idioma} e incluir a seguinte an√°lise:
        {analise}
        {dados_financeiros}

        Certifique-se de fornecer:
        1. Resumo executivo
        2. An√°lise detalhada dos dados
        3. Insights principais
        4. Recomenda√ß√µes
        5. Riscos e oportunidades

        Formate o relat√≥rio utilizando Markdown para melhor legibilidade.
        '''

        # Preparar dados financeiros
        dados_financeiros_texto = ""
        if params['analise'] == "An√°lise de Dados Financeiros":
            dados = dados_financeiros(params['empresa'], params['periodo'])
            dados_financeiros_texto = f"\n\nDados Financeiros:\n{dados}"

        # Gerar o prompt
        prompt = template.format(
            empresa=params['empresa'],
            periodo=params['periodo'],
            idioma=params['idioma'],
            analise=params['analise'],
            dados_financeiros=dados_financeiros_texto
        )
        
        # Obter resposta da API
        response = get_response(prompt)
        
        if response:
            # Salvar no hist√≥rico
            st.session_state.history.append(params)
            
            # Exibir relat√≥rio
            st.subheader('üìÑ Relat√≥rio Gerado:')
            st.markdown(response)
            
            # Bot√µes de a√ß√£o
            col1, col2 = st.columns(2)
            with col1:
                st.download_button(
                    label="üì• Download do Relat√≥rio",
                    data=response,
                    file_name=f"relatorio_{params['empresa']}_{params['periodo']}.md",
                    mime="text/markdown"
                )
            with col2:
                if st.button("üìã Copiar"):
                    st.toast("Relat√≥rio copiado com sucesso!")
            
            return response
        else:
            st.warning("N√£o foi poss√≠vel gerar o relat√≥rio. Tente novamente.")
            return None

    except Exception as e:
        st.error(f"Erro inesperado: {str(e)}")
        st.error("Por favor, tente novamente. Se o erro persistir, contate o suporte.")
        return None

def main():
    st.set_page_config(page_title="An√°lise Empresarial IA", page_icon="üìä", layout="wide")
    
    # Inicializar estado da sess√£o
    initialize_session_state()
    
    # Carregar ambiente
    api_key = load_environment()
    
    # Criar barra lateral
    create_sidebar()
    
    # Criar chat
    create_chat()
    
    # T√≠tulo principal
    st.title('An√°lise Empresarial com IA üìä')
    
    # Interface principal
    with st.container():
        selected = st.session_state.selected_params
        
        empresa = st.selectbox(
            'Selecione a empresa:', 
            EMPRESAS,
            index=EMPRESAS.index(selected['empresa'])
        )
        
        col1, col2 = st.columns(2)
        with col1:
            trimestre = st.selectbox(
                'Selecione o trimestre:', 
                TRIMESTRES,
                index=TRIMESTRES.index(selected['trimestre'])
            )
            idioma = st.selectbox(
                'Selecione o idioma:', 
                IDIOMAS,
                index=IDIOMAS.index(selected['idioma'])
            )
        with col2:
            ano = st.selectbox(
                'Selecione o ano:', 
                ANOS,
                index=ANOS.index(int(selected['ano']))
            )
            analise = st.selectbox(
                'Selecione a an√°lise:', 
                ANALISES,
                index=ANALISES.index(selected['analise'])
            )
        
        # Atualizar par√¢metros selecionados
        params = {
            'empresa': empresa,
            'periodo': f"{trimestre} {ano}",
            'idioma': idioma,
            'analise': analise,
            'trimestre': trimestre,
            'ano': ano
        }
        st.session_state.selected_params = params
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button('üöÄ Gerar Relat√≥rio', type="primary"):
                with st.spinner('Gerando relat√≥rio... Aguarde um momento.'):
                    generate_report(params)
        with col2:
            if st.button('üìä Visualizar Dados'):
                with st.spinner('Carregando dados...'):
                    if analise == "An√°lise de Dados Financeiros":
                        dados = dados_financeiros(empresa, f"{trimestre} {ano}")
                        st.markdown("### üìà Dados Financeiros")
                        st.markdown(dados)

if __name__ == '__main__':
    main()